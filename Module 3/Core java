1. Hello World Setup
Console.WriteLine("Hello, World!");

2. Value vs Reference Types
int val = 5;
string str = "Hello";
void ChangeVal(int x) => x = 10;
void ChangeRef(ref string s) => s = "Changed";
ChangeVal(val);
ChangeRef(ref str);
Console.WriteLine(val); // Still 5
Console.WriteLine(str); // Changed

3. Primary Constructor (C# 12)
public class Person(string name, int age)
{
 public string Name { get; } = name;
 public int Age { get; } = age;
 public void ShowInfo() => Console.WriteLine($"{Name}, {Age}");
}

4. Type Inference
var x = 10;
var y = new Person("Anna", 22);
Console.WriteLine(x.GetType());
Console.WriteLine(y.GetType());

5. Grade Calculation
int score = int.Parse(Console.ReadLine());
if (score >= 90) Console.WriteLine("A");
else if (score >= 75) Console.WriteLine("B");
else Console.WriteLine("F");
string grade = score switch
{
 >= 90 => "A",
 >= 75 => "B",
 _ => "F"
};
Console.WriteLine(grade);

6. Loops
int[] nums = {1, 2, 3, 4, 5};
for (int i = 0; i < nums.Length; i++) Console.WriteLine(nums[i]);
foreach (var n in nums) Console.WriteLine(n);
int j = 0;
while (j < nums.Length) Console.WriteLine(nums[j++]);
int k = 0;
do Console.WriteLine(nums[k++]); while (k < nums.Length);

7. Method Overloading
int CalculateTotal(int a, int b) => a + b;
double CalculateTotal(double a, double b, double c) => a + b + c;

8. ref, out, in Parameters
void AddRef(ref int x) => x += 10;
void GetValue(out int x) => x = 100;
void ReadIn(in int x) => Console.WriteLine(x);

9. Local Functions
int CalculateFactorial(int n)
{
 int Inner(int num) => num <= 1 ? 1 : num * Inner(num - 1);
 return Inner(n);
}

10. OOP with Constructors
class Car
{
 public string Make;
 public Car() => Make = "Default";
 public Car(string make) => Make = make;
}

11. Access Modifiers
class Test
{
 public int pub = 1;
 private int priv = 2;
 protected int prot = 3;
}

12. Auto-Properties and Backing Fields
class Product
{
 public string Name { get; set; }
 private double _price;
 public double Price
 {
 get => _price;
 set => _price = value >= 0 ? value : 0;
 }
}

13. Records with init
public record Employee(string Name, int Age)
{
 public string Position { get; init; }
}
var emp1 = new Employee("Alice", 30) { Position = "Dev" };
var emp2 = emp1 with { Position = "Manager" };

14. Inheritance & Overriding
class Shape { public virtual void Draw() => Console.WriteLine("Drawing..."); }
class Circle : Shape { public override void Draw() => Console.WriteLine("Circle"); }

15. Abstract vs Interface
abstract class Vehicle { public abstract void Drive(); }
interface IDrivable { void Start(); }
class Car : Vehicle, IDrivable
{
 public override void Drive() => Console.WriteLine("Driving");
 public void Start() => Console.WriteLine("Starting");
}

16. Null Handling
class Person { public string? Name { get; set; } }
Person p = null!;
Console.WriteLine(p?.Name ?? "No name");

17. Null Chaining
class Contact { public string? Name { get; set; } }
Contact? c = null;
Console.WriteLine(c?.Name ?? "Unknown");

18. Required Modifier
class Student
{
 public required string Name { get; init; }
 public required int Age { get; init; }
}

19. Lists and Dictionaries
var list = new List<string> { "A", "B" };
var dict = new Dictionary<int, string> { [1] = "One" };
foreach (var i in list) Console.WriteLine(i);
foreach (var kv in dict) Console.WriteLine($"{kv.Key}:{kv.Value}");

20. LINQ
var orders = new List<Order> {
 new() { OrderId = 1, CustomerName = "Joe", TotalAmount = 500 }
};
var result = orders.Where(o => o.TotalAmount > 100)
 .Select(o => new { o.CustomerName, o.TotalAmount });

21. Pattern Matching
void Describe(object obj)
{
 switch (obj)
 {
 case int i: Console.WriteLine($"Integer: {i}"); break;
 case string s: Console.WriteLine($"String: {s}"); break;
 default: Console.WriteLine("Unknown"); break;
 }
}

22. Tuples
(int, string) GetInfo() => (5, "Data");
var (id, name) = GetInfo();

23. Async File Upload
async Task<string> UploadFile()
{
 await Task.Delay(3000);
 return "Upload complete";
}

24. JSON Serialization
var user = new User { Name = "John", Age = 30, Email = "john@example.com" };
var json = JsonSerializer.Serialize(user);
File.WriteAllText("user.json", json);
var text = File.ReadAllText("user.json");
var newUser = JsonSerializer.Deserialize<User>(text);

25. FileStream and MemoryStream
using var fs = new FileStream("file.txt", FileMode.OpenOrCreate);
fs.Write(Encoding.UTF8.GetBytes("Hello"));
using var ms = new MemoryStream();
ms.Write(Encoding.UTF8.GetBytes("Test"));
Console.WriteLine(ms.Length);

26. Race Conditions
int counter = 0;
object lockObj = new();
Parallel.For(0, 1000, _ =>
{
 lock (lockObj)
 {
 counter++;
 }
});

27. Deadlock Simulation
object lock1 = new(), lock2 = new();
bool lockAcquired = false;
lockAcquired = Monitor.TryEnter(lock1, TimeSpan.FromSeconds(1));
if (lockAcquired)
{
 try { Monitor.Enter(lock2); }
 finally { Monitor.Exit(lock1); }
}

28. System.Diagnostics.Trace
Trace.Listeners.Add(new TextWriterTraceListener("log.txt"));
Trace.WriteLine("App started");
Trace.Flush();

29. Sanitize Input
string input = "<script>alert('XSS')</script>";
string sanitized = System.Net.WebUtility.HtmlEncode(input);
Console.WriteLine(sanitized);

30. ADO.NET CRUD
string connStr = "Server=localhost;Database=YourDb;Trusted_Connection=True;";
using var con = new SqlConnection(connStr);
con.Open();
// INSERT
using var cmd = new SqlCommand("INSERT INTO Employees (Name) VALUES (@name)", con);
cmd.Parameters.AddWithValue("@name", "John");
cmd.ExecuteNonQuery();
// SELECT
cmd.CommandText = "SELECT * FROM Employees";
using var reader = cmd.ExecuteReader();
while (reader.Read())
 Console.WriteLine(reader["Name"]);
// UPDATE
cmd.CommandText = "UPDATE Employees SET Name='Jane' WHERE Name='John'";
cmd.ExecuteNonQuery();
// DELETE
cmd.CommandText = "DELETE FROM Employees WHERE Name='Jane'";
cmd.ExecuteNonQuery();
